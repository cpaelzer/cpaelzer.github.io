<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ubuntu on Pälzer</title>
    <link>https://cpaelzer.github.io/tags/ubuntu/</link>
    <description>Recent content in ubuntu on Pälzer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2023 11:55:27 +0200</lastBuildDate><atom:link href="https://cpaelzer.github.io/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH login got slower, be happy!</title>
      <link>https://cpaelzer.github.io/blogs/010-ssh-got-slower/</link>
      <pubDate>Fri, 24 Mar 2023 11:55:27 +0200</pubDate>
      
      <guid>https://cpaelzer.github.io/blogs/010-ssh-got-slower/</guid>
      <description>&amp;ldquo;SSH login got slower, be happy!&amp;rdquo; a.k.a.: a quantum slower against quantum attacks We regularly gather all kind of metrics to ensure Ubuntu is/stays/gets (depends on your POV) great. One of the metrics that I wanted to look at for way too long, but the change was too small to do so earlier was our check on non interactive ssh login speed.
In that test we check how quickly you can log into ssh, do nothing and return which was a lessons learned from a bug years ago that it is better to watch for.</description>
    </item>
    
    <item>
      <title>Microvm, qboot and feature reduced qemu in Ubuntu</title>
      <link>https://cpaelzer.github.io/blogs/009-microvm-in-ubuntu/</link>
      <pubDate>Wed, 01 Jul 2020 12:08:27 +0200</pubDate>
      
      <guid>https://cpaelzer.github.io/blogs/009-microvm-in-ubuntu/</guid>
      <description>&amp;ldquo;Microvm, qboot and feature reduced qemu in Ubuntu&amp;rdquo; a.k.a Throw everything over board, we need to get faster QEMU/KVM is a very powerful, complex and feature rich software stack for virtualization. But recently more and more people ask for virtualization style isolation (compared to containers), but at the same time want it to be as similar as possible to containers in terms of speedy initialization.
For these use cases a generic QEMU sometimes is considered &amp;ldquo;too fat&amp;rdquo; and thereby ideas came up that a stripped-to-the-use-case QEMU most likely will be as fast as some emerging competitors while at the same time be already mature and compatible with a lot of other bits in the virtualization ecosystem.</description>
    </item>
    
    <item>
      <title>Ubuntu Virtualization Stack Crystal Ball</title>
      <link>https://cpaelzer.github.io/blogs/008-virt-stack-crystal-ball/</link>
      <pubDate>Mon, 20 Jan 2020 12:08:27 +0200</pubDate>
      
      <guid>https://cpaelzer.github.io/blogs/008-virt-stack-crystal-ball/</guid>
      <description>Ubuntu Virtualization Stack Crystal Ball a.k.a which version of QEMU/libvirt will be in the next Ubuntu release? Background I am asked a lot of times in different contexts which version of QEMU, libvirt, or other components the next Ubutuntu release will contain. What this post will address how the upstreams manage versions and then how the Ubuntu project chooses a version to ship.
Upstream First, consider how the two major upstreams of QEMU and libvirt handle versioning.</description>
    </item>
    
  </channel>
</rss>
